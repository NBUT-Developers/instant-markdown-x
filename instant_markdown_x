#!/usr/bin/env node
var exec = require("child_process").exec;
var server = require("http").createServer(httpHandler);

var hljs = require("highlight.js");
var io = require("socket.io").listen(server);
var MarkdownIt = require("markdown-it");
var send = require("send");

var FILE_RESERVED = require('./file_reserved');
var _markdown = "";

var BASE_PATH = process.argv.length <= 2 ? null : process.argv[process.argv.length - 1];

var md = new MarkdownIt({
    html: true,
    linkify: true,
    highlight: function(str, lang) {
        if(lang && hljs.getLanguage(lang)) {
            try {
                return hljs.highlight(lang, str).value;
            } catch(err) {
                return str;
            }
        }

        return str;
    }
});

function updateMarkdown(input, callback) {
    var body = "";
    input.on("data", function(data) {
        body += data;
        if(body.length > 1e6) {
            throw new Error("The request body is too long");
        }
    });
    input.on("end", function() {
        _markdown = md.render(body);
        callback();
    });
}

function httpHandler(req, resp) {
    switch(req.method) {
        case "GET":
            // assets files...
            if(req.url !== '/' && req.url !== '' && FILE_RESERVED.indexOf(req.url) < 0) {
                return send(req, req.url).root(BASE_PATH || process.cwd()).pipe(resp);
            }

            return send(req, req.url).root(__dirname).pipe(resp);

        case "DELETE":
            io.close();
            process.exit(0);
            break;

        case "PUT":
            updateMarkdown(req, function() {
                resp.writeHead(200);
                resp.end();

                io.emit("newContent", _markdown);
            });
            break;

        default: resp.status(200), resp.end();
    }
}

io.sockets.on("connection", function(sock) {
    console.log("Connection established!");
    sock.emit("newContent", _markdown);
});

updateMarkdown(process.stdin, function() {
    server.listen(18474);

    if(process.platform.toLowerCase().indexOf("darwin") >= 0) {
        exec("open -g http://localhost:18474", function() {});
    } else { // assume unix / linux
        exec("xdg-open http://localhost:18474", function() {});
    }
});

process.stdin.resume();
